JAVA PROFILE 1.0.1, created Fri Nov  9 14:18:31 2012

Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  - Neither the name of Oracle nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (JDK 5.0 JVMTI based)

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME        is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
                the time spent by a thread waiting to enter a monitor.
                Entries in this record are TRACEs ranked by the percentage
                of total monitor contention time and a brief description
                of the monitor.  The "count" field indicates the number of 
                times the monitor was contended at that TRACE.

MONITOR DUMP    is a complete snapshot of all the monitors and threads in 
                the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=5000016b, id = 200001, name="main", group="main")
THREAD END (id = 200001)
THREAD START (obj=50000226, id = 200005, name="DestroyJavaVM", group="main")
THREAD END (id = 200005)
THREAD END (id = 200002)
TRACE 300074:
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.siftDown(MaxHeap.java:194)
	MaxHeap.removeMax(MaxHeap.java:139)
TRACE 300075:
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.siftDown(MaxHeap.java:190)
	MaxHeap.removeMax(MaxHeap.java:139)
TRACE 300080:
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.siftDown(MaxHeap.java:194)
	MaxHeap.removeMax(MaxHeap.java:139)
TRACE 300067:
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.swap(MaxHeap.java:156)
	MaxHeap.siftDown(MaxHeap.java:198)
TRACE 300083:
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.siftDown(MaxHeap.java:190)
	MaxHeap.removeMax(MaxHeap.java:139)
TRACE 300076:
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.swap(MaxHeap.java:155)
	MaxHeap.siftDown(MaxHeap.java:198)
TRACE 300064:
	BufferPool.set(BufferPool.java:140)
	IntegerCollection.set(IntegerCollection.java:89)
	IntegerCollection.set(IntegerCollection.java:24)
	MaxHeap.swap(MaxHeap.java:158)
TRACE 300092:
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.swap(MaxHeap.java:155)
	MaxHeap.removeMax(MaxHeap.java:136)
TRACE 300077:
	MaxHeap.removeMax(MaxHeap.java:141)
	HeapSorter.sort(HeapSorter.java:60)
	heapsort.main(heapsort.java:108)
TRACE 300071:
	BufferPool.set(BufferPool.java:140)
	IntegerCollection.set(IntegerCollection.java:89)
	IntegerCollection.set(IntegerCollection.java:24)
	MaxHeap.swap(MaxHeap.java:157)
TRACE 300082:
	HeapSorter.sort(HeapSorter.java:60)
	heapsort.main(heapsort.java:108)
TRACE 300085:
	java.io.RandomAccessFile.writeBytes(RandomAccessFile.java:Unknown line)
	java.io.RandomAccessFile.write(RandomAccessFile.java:486)
	BufferPool.setBytesInFile(BufferPool.java:320)
	BufferPool.addBuffer(BufferPool.java:256)
TRACE 300050:
	IntegerCollection.decode(IntegerCollection.java:115)
	IntegerCollection.get(IntegerCollection.java:77)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.siftDown(MaxHeap.java:194)
TRACE 300061:
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.siftDown(MaxHeap.java:190)
	MaxHeap.buildHeap(MaxHeap.java:61)
TRACE 300062:
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.siftDown(MaxHeap.java:194)
	MaxHeap.buildHeap(MaxHeap.java:61)
TRACE 300065:
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.siftDown(MaxHeap.java:190)
	MaxHeap.buildHeap(MaxHeap.java:61)
TRACE 300088:
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.removeMax(MaxHeap.java:141)
	HeapSorter.sort(HeapSorter.java:60)
TRACE 300089:
	HeapSorter.sort(HeapSorter.java:57)
	heapsort.main(heapsort.java:108)
TRACE 300069:
	java.util.LinkedList.linkFirst(LinkedList.java:125)
	java.util.LinkedList.addFirst(LinkedList.java:291)
	BufferPool.retrieve(BufferPool.java:215)
	BufferPool.get(BufferPool.java:112)
TRACE 300072:
	java.io.RandomAccessFile.readBytes(RandomAccessFile.java:Unknown line)
	java.io.RandomAccessFile.read(RandomAccessFile.java:355)
	BufferPool.getBytesFromFile(BufferPool.java:300)
	BufferPool.addBuffer(BufferPool.java:266)
TRACE 300084:
	HeapSorter.sort(HeapSorter.java:57)
	heapsort.main(heapsort.java:108)
TRACE 300086:
	MaxHeap.swap(MaxHeap.java:158)
	MaxHeap.siftDown(MaxHeap.java:198)
	MaxHeap.removeMax(MaxHeap.java:139)
	HeapSorter.sort(HeapSorter.java:60)
TRACE 300118:
	java.util.ResourceBundle$CacheKey.hashCode(ResourceBundle.java:593)
	java.util.concurrent.ConcurrentHashMap.hash(ConcurrentHashMap.java:332)
	java.util.concurrent.ConcurrentHashMap.putIfAbsent(ConcurrentHashMap.java:1144)
	java.util.ResourceBundle.putBundleInCache(ResourceBundle.java:1633)
TRACE 300073:
	MaxHeap.removeMax(MaxHeap.java:141)
	HeapSorter.sort(HeapSorter.java:60)
	heapsort.main(heapsort.java:108)
TRACE 300171:
	java.lang.System.arraycopy(System.java:Unknown line)
	java.lang.String.getChars(String.java:826)
	java.io.BufferedWriter.write(BufferedWriter.java:226)
	java.io.PrintWriter.write(PrintWriter.java:456)
TRACE 300079:
	MaxHeap.removeMax(MaxHeap.java:141)
	HeapSorter.sort(HeapSorter.java:60)
	heapsort.main(heapsort.java:108)
TRACE 300078:
	java.io.RandomAccessFile.seek(RandomAccessFile.java:Unknown line)
	BufferPool.setBytesInFile(BufferPool.java:319)
	BufferPool.addBuffer(BufferPool.java:256)
	BufferPool.retrieve(BufferPool.java:221)
TRACE 300081:
	IntegerCollection.getLength(IntegerCollection.java:178)
	HeapSorter.sort(HeapSorter.java:57)
	heapsort.main(heapsort.java:108)
TRACE 300087:
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.swap(MaxHeap.java:156)
	MaxHeap.removeMax(MaxHeap.java:136)
TRACE 300090:
	java.io.RandomAccessFile.seek(RandomAccessFile.java:Unknown line)
	BufferPool.getBytesFromFile(BufferPool.java:299)
	BufferPool.addBuffer(BufferPool.java:266)
	BufferPool.retrieve(BufferPool.java:221)
TRACE 300091:
	BufferPool.get(BufferPool.java:106)
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.swap(MaxHeap.java:156)
TRACE 300139:
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:87)
	java.io.File.<init>(File.java:253)
	sun.misc.URLClassPath$JarLoader.<init>(URLClassPath.java:615)
	sun.misc.URLClassPath$3.run(URLClassPath.java:362)
TRACE 300093:
	BufferPool.addBuffer(BufferPool.java:251)
	BufferPool.retrieve(BufferPool.java:221)
	BufferPool.get(BufferPool.java:112)
	IntegerCollection.get(IntegerCollection.java:70)
TRACE 300094:
	MaxHeap.swap(MaxHeap.java:157)
	MaxHeap.siftDown(MaxHeap.java:198)
	MaxHeap.removeMax(MaxHeap.java:139)
	HeapSorter.sort(HeapSorter.java:60)
TRACE 300051:
	BufferPool.retrieve(BufferPool.java:216)
	BufferPool.get(BufferPool.java:112)
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
TRACE 300052:
	BufferPool.get(BufferPool.java:106)
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.siftDown(MaxHeap.java:190)
TRACE 300053:
	java.util.LinkedList$ListItr.<init>(LinkedList.java:873)
	java.util.LinkedList.listIterator(LinkedList.java:866)
	java.util.AbstractList.listIterator(AbstractList.java:299)
	BufferPool.retrieve(BufferPool.java:206)
TRACE 300054:
	java.util.LinkedList.linkFirst(LinkedList.java:125)
	java.util.LinkedList.addFirst(LinkedList.java:291)
	BufferPool.retrieve(BufferPool.java:215)
	BufferPool.get(BufferPool.java:112)
TRACE 300055:
	java.util.LinkedList.checkPositionIndex(LinkedList.java:557)
	java.util.LinkedList.listIterator(LinkedList.java:865)
	java.util.AbstractList.listIterator(AbstractList.java:299)
	BufferPool.retrieve(BufferPool.java:206)
TRACE 300056:
	BufferPool.get(BufferPool.java:112)
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.siftDown(MaxHeap.java:194)
TRACE 300057:
	HeapRecord.compareTo(HeapRecord.java:9)
	MaxHeap.siftDown(MaxHeap.java:194)
	MaxHeap.buildHeap(MaxHeap.java:61)
	MaxHeap.<init>(MaxHeap.java:51)
TRACE 300058:
	IntegerCollection.encode(IntegerCollection.java:131)
	IntegerCollection.set(IntegerCollection.java:86)
	IntegerCollection.set(IntegerCollection.java:24)
	MaxHeap.swap(MaxHeap.java:157)
TRACE 300059:
	MaxHeap.isLeaf(MaxHeap.java:75)
	MaxHeap.siftDown(MaxHeap.java:187)
	MaxHeap.buildHeap(MaxHeap.java:61)
	MaxHeap.<init>(MaxHeap.java:51)
TRACE 300060:
	IntegerCollection.encode(IntegerCollection.java:127)
	IntegerCollection.set(IntegerCollection.java:86)
	IntegerCollection.set(IntegerCollection.java:24)
	MaxHeap.swap(MaxHeap.java:157)
TRACE 300063:
	IntegerCollection.get(IntegerCollection.java:70)
	IntegerCollection.get(IntegerCollection.java:24)
	MaxHeap.siftDown(MaxHeap.java:194)
	MaxHeap.buildHeap(MaxHeap.java:61)
TRACE 300066:
	java.util.LinkedList.linkFirst(LinkedList.java:127)
	java.util.LinkedList.addFirst(LinkedList.java:291)
	BufferPool.addBuffer(BufferPool.java:276)
	BufferPool.retrieve(BufferPool.java:221)
TRACE 300041:
	java.util.Arrays.copyOfRange(Arrays.java:2691)
	java.lang.String.<init>(String.java:203)
	java.lang.String.substring(String.java:1913)
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:69)
TRACE 300070:
	BufferPool.addBuffer(BufferPool.java:266)
	BufferPool.retrieve(BufferPool.java:221)
	BufferPool.get(BufferPool.java:112)
	IntegerCollection.get(IntegerCollection.java:70)
CPU SAMPLES BEGIN (total = 184) Fri Nov  9 14:18:34 2012
rank   self  accum   count trace method
   1 13.59% 13.59%      25 300074 IntegerCollection.get
   2 10.33% 23.91%      19 300075 IntegerCollection.get
   3 10.33% 34.24%      19 300080 IntegerCollection.get
   4 10.33% 44.57%      19 300067 IntegerCollection.get
   5  9.78% 54.35%      18 300083 IntegerCollection.get
   6  8.15% 62.50%      15 300076 IntegerCollection.get
   7  4.89% 67.39%       9 300064 BufferPool.set
   8  1.63% 69.02%       3 300092 IntegerCollection.get
   9  1.63% 70.65%       3 300077 MaxHeap.removeMax
  10  1.63% 72.28%       3 300071 BufferPool.set
  11  1.63% 73.91%       3 300082 HeapSorter.sort
  12  1.09% 75.00%       2 300085 java.io.RandomAccessFile.writeBytes
  13  1.09% 76.09%       2 300050 IntegerCollection.decode
  14  1.09% 77.17%       2 300061 IntegerCollection.get
  15  1.09% 78.26%       2 300062 IntegerCollection.get
  16  1.09% 79.35%       2 300065 IntegerCollection.get
  17  1.09% 80.43%       2 300088 IntegerCollection.get
  18  1.09% 81.52%       2 300089 HeapSorter.sort
  19  1.09% 82.61%       2 300069 java.util.LinkedList.linkFirst
  20  1.09% 83.70%       2 300072 java.io.RandomAccessFile.readBytes
  21  1.09% 84.78%       2 300084 HeapSorter.sort
  22  1.09% 85.87%       2 300086 MaxHeap.swap
  23  0.54% 86.41%       1 300118 java.util.ResourceBundle$CacheKey.hashCode
  24  0.54% 86.96%       1 300073 MaxHeap.removeMax
  25  0.54% 87.50%       1 300171 java.lang.System.arraycopy
  26  0.54% 88.04%       1 300079 MaxHeap.removeMax
  27  0.54% 88.59%       1 300078 java.io.RandomAccessFile.seek
  28  0.54% 89.13%       1 300081 IntegerCollection.getLength
  29  0.54% 89.67%       1 300087 IntegerCollection.get
  30  0.54% 90.22%       1 300090 java.io.RandomAccessFile.seek
  31  0.54% 90.76%       1 300091 BufferPool.get
  32  0.54% 91.30%       1 300139 java.io.UnixFileSystem.normalize
  33  0.54% 91.85%       1 300093 BufferPool.addBuffer
  34  0.54% 92.39%       1 300094 MaxHeap.swap
  35  0.54% 92.93%       1 300051 BufferPool.retrieve
  36  0.54% 93.48%       1 300052 BufferPool.get
  37  0.54% 94.02%       1 300053 java.util.LinkedList$ListItr.<init>
  38  0.54% 94.57%       1 300054 java.util.LinkedList.linkFirst
  39  0.54% 95.11%       1 300055 java.util.LinkedList.checkPositionIndex
  40  0.54% 95.65%       1 300056 BufferPool.get
  41  0.54% 96.20%       1 300057 HeapRecord.compareTo
  42  0.54% 96.74%       1 300058 IntegerCollection.encode
  43  0.54% 97.28%       1 300059 MaxHeap.isLeaf
  44  0.54% 97.83%       1 300060 IntegerCollection.encode
  45  0.54% 98.37%       1 300063 IntegerCollection.get
  46  0.54% 98.91%       1 300066 java.util.LinkedList.linkFirst
  47  0.54% 99.46%       1 300041 java.util.Arrays.copyOfRange
  48  0.54% 100.00%       1 300070 BufferPool.addBuffer
CPU SAMPLES END
